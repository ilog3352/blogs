import{_ as d,c as e,o as a,ag as r}from"./chunks/framework.DuJzXpJq.js";const k=JSON.parse('{"title":"常用命令","description":"","frontmatter":{},"headers":[],"relativePath":"node/nestjs/order.md","filePath":"node/nestjs/order.md","lastUpdated":null}'),s={name:"node/nestjs/order.md"};function i(n,t,l,o,p,c){return a(),e("div",null,t[0]||(t[0]=[r(`<h1 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h1><p><strong>使用命令创建文件会自动引入</strong></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#创建一个restful风格的api 模块叫user</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> res</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#起手是 nest g 后边跟操作 名字</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#比如创建一个service文件名字叫post</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> post</span></span></code></pre></div><table tabindex="0"><thead><tr><th>name</th><th>alias</th><th>description</th><th>chinese</th></tr></thead><tbody><tr><td>application</td><td>application</td><td>Generate a new application workspace</td><td>创建nest项目，workspace 关联</td></tr><tr><td>class</td><td>cl</td><td>Generate a new class</td><td>创建clase</td></tr><tr><td>configuration</td><td>config</td><td>Generate a CLI configuration file</td><td>创建配置文件</td></tr><tr><td>controller</td><td>co</td><td>Generate a controller declaration</td><td>创建controller文件</td></tr><tr><td>decorator</td><td>d</td><td>Generate a custom decorator</td><td>创建自定义装饰器</td></tr><tr><td>filter</td><td>f</td><td>Generate a filter declaration</td><td>创建过滤器</td></tr><tr><td>gateway</td><td>ga</td><td>Generate a gateway declaration</td><td>创建网关层dome</td></tr><tr><td>guard</td><td>gu</td><td>Generate a guard declaration</td><td></td></tr><tr><td>interceptor</td><td>itc</td><td>Generate an interceptor declaration</td><td>nest的拦截器（axios拦截器）</td></tr><tr><td>interface</td><td>itf</td><td>Generate an interface</td><td>声明文件</td></tr><tr><td>library</td><td>lib</td><td>Generate a new library within a monorepo</td><td>编写库/工具 需要</td></tr><tr><td>middleware</td><td>mi</td><td>Generate a middleware declaration</td><td>中间件</td></tr><tr><td>module</td><td>mo</td><td>Generate a module declaration</td><td></td></tr><tr><td>pipe</td><td>pi</td><td>Generate a pipe declaration</td><td>管道</td></tr><tr><td>provider</td><td>pr</td><td>Generate a provider declaration</td><td>依赖注入</td></tr><tr><td>resolver</td><td>r</td><td>Generate a GraphQL resolver declaration</td><td></td></tr><tr><td>resource</td><td>res</td><td>Generate a new CRUD resource</td><td>快速编写api</td></tr><tr><td>service</td><td>s</td><td>Generate a service declaration</td><td>创建service文件</td></tr><tr><td>sub-app</td><td>app</td><td>Generate a new application within a monorepo</td><td>创建子应用</td></tr></tbody></table>`,4)]))}const g=d(s,[["render",i]]);export{k as __pageData,g as default};
