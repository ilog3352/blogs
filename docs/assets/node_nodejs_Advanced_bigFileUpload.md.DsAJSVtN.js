import{_ as a,c as o,o as l,ag as r}from"./chunks/framework.DuJzXpJq.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"node/nodejs/Advanced/bigFileUpload.md","filePath":"node/nodejs/Advanced/bigFileUpload.md","lastUpdated":1744789396000}'),i={name:"node/nodejs/Advanced/bigFileUpload.md"};function t(d,e,n,p,s,c){return l(),o("div",null,e[0]||(e[0]=[r('<h2 id="秒传" tabindex="-1">秒传 <a class="header-anchor" href="#秒传" aria-label="Permalink to &quot;秒传&quot;">​</a></h2><p>A上传文件时携带MD5值，B上传文件时，如果MD5值相同 就粘贴A的文件 改个名字</p><p>MD5 是文件的唯一标识 散列函数的一种</p><p><strong>spark-md5</strong> 生成文件的MD5值</p><p><code>https://cdnjs.cloudflare.com/ajax/libs/spark-md5/3.0.2/spark-md5.min.js</code></p><h2 id="大文件上传" tabindex="-1">大文件上传 <a class="header-anchor" href="#大文件上传" aria-label="Permalink to &quot;大文件上传&quot;">​</a></h2><p>大文件上传 分片上传 可以并行上传 最大并发数为6，IE浏览器为5</p><p><em>file对象继承Blob，Blob有一个方法slice，进行分片</em></p><p>使用spark-md5生成MD5，前端计算非常慢，阻塞线程，使用web-worker</p><p>multer 中间件</p><ul><li>文件上传中间件</li><li><strong>上传file 一定要写在最下面 读到file就停了</strong></li></ul><p>通过文件流合并 / appendFile合并</p><h3 id="web-worker" tabindex="-1">web-worker <a class="header-anchor" href="#web-worker" aria-label="Permalink to &quot;web-worker&quot;">​</a></h3><ul><li>多线程</li><li>无法访问DOM和window对象</li><li>可以计算，IO操作</li></ul><h3 id="断点续传" tabindex="-1">断点续传 <a class="header-anchor" href="#断点续传" aria-label="Permalink to &quot;断点续传&quot;">​</a></h3><p>在上传文件时 每个文件都有一个md5值，如果中途断网已经上传过，再次上传时会找到已经上传的切片，直接跳过即可，即做判断是否存在当前上传的切片</p>',16)]))}const _=a(i,[["render",t]]);export{m as __pageData,_ as default};
