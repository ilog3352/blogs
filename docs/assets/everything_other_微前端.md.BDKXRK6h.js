import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.DuJzXpJq.js";const c=JSON.parse('{"title":"微前端","description":"","frontmatter":{},"headers":[],"relativePath":"everything/other/微前端.md","filePath":"everything/other/微前端.md","lastUpdated":1760881866000}'),t={name:"everything/other/微前端.md"};function l(p,s,o,r,h,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="微前端" tabindex="-1">微前端 <a class="header-anchor" href="#微前端" aria-label="Permalink to &quot;微前端&quot;">​</a></h1><p>类似微服务，串联多个应用整合成一个应用</p><p>最早iframe 方式 缺点：路由无法保存 ， 弹框只能在iframe里不方便</p><p>通讯：postMessage（&quot;*&quot;)</p><p>微前端 框架 qiankun wujie</p><p>核心思想：css隔离 js隔离</p><h2 id="qiankun方案" tabindex="-1">qiankun方案 <a class="header-anchor" href="#qiankun方案" aria-label="Permalink to &quot;qiankun方案&quot;">​</a></h2><p>qiankun是基于single-spa封装的</p><p>css沙箱</p><ol><li><p>webComponent 的 Shadow DOM 开启方式：strictStyleIsolation: true</p></li><li><p>vue的Scoped方案 postcss实现 开启方式： experimentalStyleIsolation: true</p></li></ol><p>js沙箱实现：</p><ol><li><p>快照模式：不支持 Proxy 时使用。加载子应用前保存 window 快照；加载时将子应用挂到真实 window，卸载时恢复快照。缺点：一次只能运行一个子应用，window 属性多时性能下降。</p></li><li><p>Proxy 模式：现代浏览器可用。为每个子应用创建一个代理 window（fakeWindow），访问先查代理，未命中再访问真实 window；卸载时销毁代理。优点：可同时加载多个子应用，性能更好。</p></li></ol><h2 id="wujei方案" tabindex="-1"><strong>wujei方案</strong> <a class="header-anchor" href="#wujei方案" aria-label="Permalink to &quot;**wujei方案**&quot;">​</a></h2><p>css隔离：webComponent 的 Shadow DOM js沙箱 iframe</p><p>微前端跨域解决</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在vite/webpack配置文件里配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">devServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;Access-Control-Allow-Origin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="monorepo架构" tabindex="-1">monorepo架构 <a class="header-anchor" href="#monorepo架构" aria-label="Permalink to &quot;monorepo架构&quot;">​</a></h2><ol><li>多个项目的node_modules公共模块共享</li><li>子模块代码复用 比如axios 等</li></ol>`,18)]))}const u=a(t,[["render",l]]);export{c as __pageData,u as default};
