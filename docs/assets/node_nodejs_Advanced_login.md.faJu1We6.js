import{_ as n,c as a,o,ag as i}from"./chunks/framework.DuJzXpJq.js";const t="/blogs/assets/image.B9JaibUE.png",h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"node/nodejs/Advanced/login.md","filePath":"node/nodejs/Advanced/login.md","lastUpdated":1744789396000}'),s={name:"node/nodejs/Advanced/login.md"};function d(l,e,r,c,p,g){return o(),a("div",null,e[0]||(e[0]=[i('<h2 id="single-sing-on" tabindex="-1">Single Sing-On <a class="header-anchor" href="#single-sing-on" aria-label="Permalink to &quot;Single Sing-On&quot;">​</a></h2><p>sso单点登录：在一个公司下，用户只需要登录其中一个应用，就可以登录公司下其他的所有应用</p><p>每个应用登录页面都使用同一个登录页面</p><p>应用刚一进就访问登录接口，跳转到登录页面，如果有token就不访问，登录时拼接上appId用于登录成功后跳转回当前应用</p><p>后端登录成功后种一个cookie，过期时间等，存一个信息用于区别已经登录，如果已经登录过，别的应用访问直接免登录</p><h2 id="single-device-login" tabindex="-1">Single Device Login <a class="header-anchor" href="#single-device-login" aria-label="Permalink to &quot;Single Device Login&quot;">​</a></h2><p>单设备登录：同一个账号在同一个设备上登录，其他设备上会挤掉当前设备</p><p>使用ws实现，初始化一个对象，当一次登录使用用户的id当key，如果key存在，则挤掉当前设备</p><h2 id="scan-code-login" tabindex="-1">Scan Code Login <a class="header-anchor" href="#scan-code-login" aria-label="Permalink to &quot;Scan Code Login&quot;">​</a></h2><p>扫码登录</p><p>qrcode.js生成二维码</p><p>jsonwebtoken生成token</p><p><img src="'+t+'" alt="alt text"></p>',13)]))}const m=n(s,[["render",d]]);export{h as __pageData,m as default};
