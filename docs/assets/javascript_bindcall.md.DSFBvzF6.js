import{_ as l,c as i,o as t,ag as e}from"./chunks/framework.DuJzXpJq.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/bindcall.md","filePath":"javascript/bindcall.md","lastUpdated":1744789396000}'),r={name:"javascript/bindcall.md"};function n(c,a,d,s,o,p){return t(),i("div",null,a[0]||(a[0]=[e('<h2 id="call" tabindex="-1">call <a class="header-anchor" href="#call" aria-label="Permalink to &quot;call&quot;">​</a></h2><ul><li>call接受两个参数，第一个参数为this指向，第二个参数为参数列表</li><li>函数A.call(this指向,参数列表)</li></ul><h2 id="apply" tabindex="-1">apply <a class="header-anchor" href="#apply" aria-label="Permalink to &quot;apply&quot;">​</a></h2><ul><li>apply接受两个参数，第一个参数为this指向，第二个参数为参数数组</li><li>函数A.apply(this指向,参数数组)</li></ul><h2 id="bind" tabindex="-1">bind <a class="header-anchor" href="#bind" aria-label="Permalink to &quot;bind&quot;">​</a></h2><ul><li>bind跟call一摸一样，区别不会立刻调用函数，返回一个新函数</li><li>函数A.bind(this指向,参数列表)</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>call和apply是立刻调用函数，bind是返回一个新函数，不会立刻调用函数</li><li>call和apply的第一个参数都是this指向，bind的第一个参数是this指向</li><li>call和apply的第二个参数是参数列表，bind的第二个参数是参数列表</li></ul>',8)]))}const u=l(r,[["render",n]]);export{b as __pageData,u as default};
