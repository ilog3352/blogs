import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.DuJzXpJq.js";const E=JSON.parse('{"title":"响应式原理","description":"","frontmatter":{},"headers":[],"relativePath":"everything/vue/响应式原理.md","filePath":"everything/vue/响应式原理.md","lastUpdated":null}'),n={name:"everything/vue/响应式原理.md"};function p(h,s,l,k,r,d){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="响应式原理" tabindex="-1">响应式原理 <a class="header-anchor" href="#响应式原理" aria-label="Permalink to &quot;响应式原理&quot;">​</a></h1><p>vue3使用Proxy中的get set来拦截读取赋值的操作做收集依赖tracker和更新依赖trigger</p><p>使用effect副作用函数来绑定dom跟数据</p><p>在外层组装了一个weakMap结构用来存放依赖</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">weakMap</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">target,Map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">targetKey,Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Effect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span></span></code></pre></div><p>在tracker函数中来组装这个数据结构，weakMap的key是当前对象，value是一个Map结构</p><p>Map结构中的key是当前正在使用的对象的key，值是一个Set，Set就是副作用函数</p><p>那更新依赖就能拿到这个weakMap结构，执行这个副作用函数就可以更新</p><p><strong>ref</strong>:如果是对象，调用reactive，内部声明一个类有get value set value，然后通过tracker和trigger收集依赖更新依赖</p><h2 id="proxy" tabindex="-1">proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;proxy&quot;">​</a></h2><p>Proxy 是一个类，接受两个个参数，第一个参数target，第二个参数是一个对象</p><p>第二个参数中有很多API：get、set、apply、deleteProperty等等13个API</p><h2 id="weakmap" tabindex="-1">weakMap <a class="header-anchor" href="#weakmap" aria-label="Permalink to &quot;weakMap&quot;">​</a></h2><p>为啥使用weakmap ：<strong>鱿鱼西考虑到了用户会手动释放变量的情况</strong></p><p>想要理解 WeakMap，首先需要了解垃圾回收机制（GC），<strong>标记清除</strong>算法。</p><p>当一个变量所有的引用全部被释放，此变量才会被回收。</p><p>key只能是对象 弱引用 不能遍历 垃圾回收有200-300ms间隔</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {name: &#39;1&#39;} 因为 b 仍然引用它</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WeakMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;some metadata&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 删除对 obj 的强引用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此时，原对象可以被垃圾回收。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WeakMap 中的键是“弱引用”，不会阻止对象被回收。</span></span></code></pre></div><h2 id="什么是副作用函数-什么是纯函数" tabindex="-1">什么是副作用函数，什么是纯函数 <a class="header-anchor" href="#什么是副作用函数-什么是纯函数" aria-label="Permalink to &quot;什么是副作用函数，什么是纯函数&quot;">​</a></h2><p>纯函数：函数的的行为是可预测的，相同的输入永远会得到相同的输出，不会修改外部的状态，也不依赖外部状态。副作用函数则相反。</p><p>副作用函数并不是贬义，像react的useEffect，vue的源码中，都是用了这种函数。</p>`,22)]))}const o=i(n,[["render",p]]);export{E as __pageData,o as default};
